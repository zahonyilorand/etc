" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
"syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

""""""""""""""""""""""""""""
" My settings
""""""""""""""""""""""""""""

syntax on
"color colorer
color mycolors
"color morning

set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set incsearch		" Incremental search

set hlsearch
set title
set ruler
"set number

set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set cindent

set mouse=n

set wildmode=list:longest
set wildmenu

set history=200

set diffopt+=iwhite

au BufRead,BufNewFile *[ch]pp@@/main/*[0-9]* set filetype=cpp
au BufRead,BufNewFile *_trclog.txt_[0-9][0-9][0-9] set filetype=rctrace
au! Syntax rctrace source $HOME/.vim/syntax/rctrace.vim
au BufRead,BufNewFile server.log* set filetype=jbosslog
au BufRead,BufNewFile *.scad setfiletype openscad
"au! Syntax jbosslog

" XML folding:
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax foldcolumn=3

map <F2> :set mouse=n
map <F3> :set mouse=

map <F5> :set cindent autoindent
map <F6> :set nocindent noautoindent

map <F12> :call SetBgForThisLine("Magenta")

function! SetFg(var1,var2)
  if !exists("s:call_count")
    let s:call_count = 0
  endif
  let s:call_count = s:call_count + 1
  echo "called" s:call_count "times"

  let s:cmd = ":syn match HiWord".s:call_count." display \"".a:var1."\""
  execute s:cmd
  let s:cmd = ":hi HiWord".s:call_count." ctermfg=".a:var2
  execute s:cmd
endfunction

function! SetBg(var1,var2)
  if !exists("s:call_count")
    let s:call_count = 0
  endif
  let s:call_count = s:call_count + 1
  echo "called" s:call_count "times"

  let s:cmd = ":syn match HiWord".s:call_count." display \"".a:var1."\""
  execute s:cmd
  let s:cmd = ":hi HiWord".s:call_count." ctermbg=".a:var2
  execute s:cmd
endfunction

function! SetBgForThisLine(var_color)
  if !exists("s:call_count")
    let s:call_count = 0
  endif
  let s:call_count = s:call_count + 1
  echo "called" s:call_count "times"

  let s:line = getline(line("."))
  let s:line_esc = escape(s:line, '\\/.*$^~[]')

  let s:cmd = ":syn match HiWord".s:call_count." display \"".s:line_esc."\""
  execute s:cmd
  let s:cmd = ":hi HiWord".s:call_count." ctermbg=".a:var_color
  execute s:cmd
endfunction

function! EchoClassSyn(var1,var2,var3)
  if !exists("s:call_count")
    let s:call_count = 0
  endif
  let s:call_count = s:call_count + 1
  echo "called" s:call_count "times"

  echo ":syn match HiWord".s:call_count."_1 display \"[ \\t]".a:var1."_[<>a-zA-Z0-9_]*::[^\(]*([^\)]*)\" contains=HiWord".s:call_count."_2"
  echo ":syn match HiWord".s:call_count."_2 display contained \"::[^\(]*([^\)]*)\""
  echo ":hi HiWord".s:call_count."_1 ctermfg=".a:var2
  echo ":hi HiWord".s:call_count."_2 ctermfg=".a:var3
endfunction

"if ! filewritable(@%)  " @% - the name of the file you are currently editing
"  set mouse=n
"endif

"set backspace=indent,eol,start     " backspace problemara

""""""""""""""""""""""""
" Ha nincsenek szinek:
""""""""""""""""""""""""

"if &term =~ "xterm"
"  if has("terminfo")
"    set t_Co=8
"    set t_Sf=^[[3%p1%dm
"    set t_Sb=^[[4%p1%dm
"    set t_kh=^[[7;*H    "ez a <HOME> billentyu
"  else
"    set t_Co=8
"    set t_Sf=^[[3%dm
"    set t_Sb=^[[4%dm
"    set t_kh=^[OH    "ez a <HOME> billentyu
"  endif
"endif

""""""""""""""""""""""""""""""""
" Auto settings for filetypes:
""""""""""""""""""""""""""""""""

"au BufRead,BufNewFile *[ch]pp@@/main/*[0-9]* set filetype=cpp
"au BufRead,BufNewFile *_trclog.txt_[0-9][0-9][0-9] set filetype=rctrace
"au! Syntax rctrace source $HOME/.vim/syntax/rctrace.vim

"au BufRead,BufNewFile MESc.[0-9][0-9][0-9].log set filetype=mesclog
"au! Syntax mesclog source $VIM/vim80/syntax/mesclog.vim

command! -nargs=0 MakeCFolding :call MakeCFoldingFunc()
function! MakeCFoldingFunc()
	syn region CBlock start="{" end="}" transparent fold
  syn sync fromstart
  "syn sync maxlines=100
  set foldlevel=1
  set foldmethod=syntax
  set foldcolumn=3
	set foldnestmax=2
	"set foldminlines=8
endfunction
